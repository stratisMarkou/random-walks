Traceback (most recent call last):
  File "/Users/stratismarkou/miniconda3/envs/rw/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/stratismarkou/miniconda3/envs/rw/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/stratismarkou/miniconda3/envs/rw/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/stratismarkou/miniconda3/envs/rw/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Users/stratismarkou/miniconda3/envs/rw/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/stratismarkou/miniconda3/envs/rw/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/stratismarkou/miniconda3/envs/rw/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import tensorflow as tf

def mixture_of_gaussians_logprob(locs, scales, probs):
    
    def logprob(x):
        
        # Dimension of x
        D = x.shape[-1]
        
        # Ensure MoG weight probabilities sum to 1
        log_probs = tf.math.log(probs[None, :] / tf.reduce_sum(probs))
        
        # Differences between x and gaussian locations
        diff = x[:, None, :] - locs[None, :, :]
        
        # Compute log of gaussian, including the normalising constant
        quad = -0.5 * tf.reduce_sum((diff / scales) ** 2, axis=2)
        quad = quad - 0.5 * D * tf.math.log(2 * np.pi * tf.reduce_prod(scales, axis=-1) ** 2)
        
        # Compute log-probability using the log-sum-exp trick for stability
        summands = log_probs + quad
        max_summand = tf.reduce_max(summands, axis=1)
        
        summed = tf.reduce_sum(tf.exp(summands - max_summand[:, None]), axis=1)
        summed = max_summand + tf.math.log(summed)
        
        return summed
    
    return logprob
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[2], line 1[0m
[0;32m----> 1[0m [38;5;28;01mimport[39;00m [38;5;21;01mtensorflow[39;00m [38;5;28;01mas[39;00m [38;5;21;01mtf[39;00m
[1;32m      3[0m [38;5;28;01mdef[39;00m [38;5;21mmixture_of_gaussians_logprob[39m(locs, scales, probs):
[1;32m      5[0m     [38;5;28;01mdef[39;00m [38;5;21mlogprob[39m(x):
[1;32m      6[0m         
[1;32m      7[0m         [38;5;66;03m# Dimension of x[39;00m

[0;31mModuleNotFoundError[0m: No module named 'tensorflow'

